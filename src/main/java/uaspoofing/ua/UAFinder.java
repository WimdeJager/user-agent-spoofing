package uaspoofing.ua;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

import com.github.javaparser.ParseProblemException;
import com.github.javaparser.StaticJavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.expr.Expression;
import com.github.javaparser.ast.expr.MethodCallExpr;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;
import uaspoofing.apk.UAList;
import uaspoofing.output.OutputHandler;

/**
 * Tries to find a User Agent in the .java files that are present in the given (underlying)
 * directory(ies).
 */
public class UAFinder {

  private File dir;

  private UAList uas;

  public UAFinder(File dir) {
    this.dir = dir;
    this.uas = new UAList();
  }

  public UAList find() {
    _find(dir);
    return uas;
  }

  private void _find(File d) {
//    OutputHandler.print(OutputHandler.Type.INF,
//        "Looking in dir " + d.getPath());

    if (d.getName().contains("android")
        || d.getName().contains("google")
        || d.getName().contains("apache")) {
      return;
    }

    for (final File f : d.listFiles()) {
      if (f.isDirectory()) {
        _find(f);
      } else {
//        OutputHandler.print(OutputHandler.Type.INF,
//            "Processing file " + f.getName() + " ...");

        try {
          CompilationUnit cu = StaticJavaParser.parse(f);

          new VoidVisitorAdapter<Object>() {
            @Override
            public void visit(MethodCallExpr n, Object arg) {
              super.visit(n, arg);
              String call = n.getNameAsString();

              if (call.equals("setHeader") && n.getArguments().size() > 1) {
                if (n.getArgument(0).toString().equals("\"User-Agent\"")) {
//                  OutputHandler.newline();
//                  OutputHandler.print(OutputHandler.Type.INF,
//                      "UA change using setHeader detected in file: " +
//                          f.getPath());

                  checkUA(n.getArgument(1), f);
                }
              }

              if (call.equals("addHeader") && n.getArguments().size() > 1) {
                if (n.getArgument(0).toString().equals("\"User-Agent\"")) {
//                  OutputHandler.newline();
//                  OutputHandler.print(OutputHandler.Type.INF,
//                      "UA change using addHeader detected in file: " +
//                          f.getPath());

                  checkUA(n.getArgument(1), f);
                }
              }

              if (call.equals("setParameter") && n.getArguments().size() > 1) {
                if (n.getArgument(0).toString().equals("\"User-Agent\"")) {
//                  OutputHandler.newline();
//                  OutputHandler.print(OutputHandler.Type.INF,
//                      "UA change using setParameter detected in file: " +
//                          f.getPath());

                  checkUA(n.getArgument(1), f);
                }
              }

              if (call.equals("setUserAgentString") && n.getArguments().size() > 1) {
                if (n.getArgument(0).toString().equals("\"User-Agent\"")) {
//                  OutputHandler.newline();
//                  OutputHandler.print(OutputHandler.Type.INF,
//                      "UA change using setHeader detected in file " +
//                          f.getPath());

                  checkUA(n.getArgument(1), f);
                }
              }

              if (call.equals("setRequestProperty") && n.getArguments().size() > 1) {
                if (n.getArgument(0).toString().equals("\"User-Agent\"")) {
//                  OutputHandler.newline();
//                  OutputHandler.print(OutputHandler.Type.INF,
//                      "UA change using setRequestProperty detected in file " +
//                          f.getPath());

                  checkUA(n.getArgument(1), f);
                }
              }

            }
          }.visit(cu, null);
        }

        catch (ParseProblemException e) {
          OutputHandler.print(OutputHandler.Type.WRN,
              "File " + f.getPath() + " could not be parsed!");
        } catch (FileNotFoundException e) {
          OutputHandler.print(OutputHandler.Type.WRN,
              "File " + f.getPath() + " could not be found!");
        }
      }
    }
  }

  private void checkUA(Expression e, File file) {
    if (e.isStringLiteralExpr()) {
      String str = e.toString();

//      OutputHandler.print(OutputHandler.Type.INF,
//          "UA is " + str);

      str = str.replaceAll("^(['\"])(.*)\\1$", "$2");

      uas.add(new UserAgent(str, file));
    }

//    else if (e.isNameExpr()) {
//      OutputHandler.print(OutputHandler.Type.INF,
//          "UA is contained in variable: " + e);
//    }
//
//    else if (e.isMethodCallExpr()) {
//      OutputHandler.print(OutputHandler.Type.INF,
//          "UA is generated by method: " + e);
//    }
//
//    else if (e.isFieldAccessExpr()) {
//      OutputHandler.print(OutputHandler.Type.INF,
//          "UA is contained in field: " + e);
//    }
//
//    else {
//      OutputHandler.print(OutputHandler.Type.INF,
//          "UA is contained in some other container: " + e);
//    }
  }

}
